{"version":3,"sources":["logo.png","Authentication.js","ReactionButton.js","Tdlib.js","Slideshow.js","EmptyChat.js","ChatSelection.js","MainApp.js","App.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","display","placeItems","Authentication","event","client","qr","React","useRef","useEffect","a","type","send","other_user_ids","qrCode","QRCodeStyling","width","height","data","authorization_state","link","image","logo","dotsOptions","color","backgroundOptions","imageOptions","crossOrigin","margin","current","innerHTML","append","handleAuhentication","ref","Button","button","padding","border","font","backgroundColor","borderRadius","fontSize","ReactionButton","text","children","useSound","volume","playActive","playOn","onMouseDown","onMouseUp","chat_id","reply_to_message_id","input_message_content","entities","sendReaction","TelegramContext","createContext","TelegramProvider","props","useState","setClient","chatId","setChatId","chatIdRef","setEvent","history","setHistory","downloadFile","fileId","file_id","priority","synchronous","getChatHistory","useCallback","from_message_id","limit","then","newHistory","uniqueMessages","Set","messages","Array","from","sort","b","date","onUpdate","update","message","message_ids","forEach","messageId","filter","id","handleMessages","console","log","tdlib","TdClient","useTestDC","readOnly","verbosity","jsVerbosity","fastUpdating","useDatabase","mode","parameters","use_test_dc","api_id","process","api_hash","system_language_code","navigator","language","device_model","application_version","use_secret_chats","use_message_database","use_file_database","files_directory","chat_list","offset_order","offset_chat_id","loadHistory","Provider","value","useTdlib","context","useContext","undefined","Error","overflow","cursor","Picture","blob","backgroundImage","backgroundPosition","backgroundRepeat","backgroundSize","Caption","position","top","left","Reactions","flexDirection","Slideshow","media","setMedia","caption","setCaption","mediaMessages","includes","content","isEmpty","first","last","photo","photoSize","sizes","photoFileId","localPhotoFile","photoSrc","URL","createObjectURL","data-testid","video","videoId","localVideoFile","videoSrc","src","controls","autoPlay","getLastMessage","ChatPicture","Message","EmptyChat","title","setTitle","chatPhoto","setChatPhoto","isSubscribed","chat","big","localFile","getChat","ListContainer","scrollDirection","List","ul","listStyle","Chat","li","background","ChatSelection","chats","setChats","chat_ids","map","chatInfo","getChats","onClick","MainApp","App","updates","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e73164f0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.eea735da.png\";","import React from 'react'\nimport styled from 'styled-components'\nimport QRCodeStyling from 'qr-code-styling'\nimport logo from './logo.png'\n\nconst Container = styled.div({\n  display: 'grid',\n  placeItems: 'center'\n})\n\nexport default function Authentication ({ event, client }) {\n  const qr = React.useRef()\n\n  React.useEffect(() => {\n    async function handleAuhentication () {\n      const type = event['authorization_state']['@type']\n      switch (type) {\n        case 'authorizationStateWaitEncryptionKey':\n          await client.send({\n            '@type': 'checkDatabaseEncryptionKey'\n          })\n          break\n        case 'authorizationStateClosed':\n        case 'authorizationStateWaitPhoneNumber':\n          await client.send({\n            '@type': 'requestQrCodeAuthentication',\n            other_user_ids: []\n          })\n          break\n        case 'authorizationStateWaitOtherDeviceConfirmation':\n          const qrCode = new QRCodeStyling({\n            width: 400,\n            height: 400,\n            data: event.authorization_state.link,\n            image: logo,\n            dotsOptions: {\n              color: '#25abec',\n              type: 'square'\n            },\n            backgroundOptions: {\n              color: 'transparent'\n            },\n            imageOptions: {\n              crossOrigin: 'anonymous',\n              margin: 20\n            }\n          })\n\n          qr.current.innerHTML = ''\n          qrCode.append(qr.current)\n\n          break\n        default:\n          break\n      }\n    }\n\n    if (client && event?.authorization_state) {\n      handleAuhentication()\n    }\n  }, [client, event])\n\n  return (\n    <Container>\n      <h1>Login with your device</h1>\n      <div ref={qr}></div>\n    </Container>\n  )\n}\n\n// function areEqual (prevProps, nextProps) {\n//   return prevProps['type'] === nextProps['type']\n// }\n\n// export default React.memo(Authentication, areEqual)\n","import React from 'react'\nimport styled from 'styled-components'\nimport useSound from 'use-sound'\n\nconst Button = styled.button({\n  padding: 10,\n  border: 'none',\n  font: 'inherit',\n  color: 'inherit',\n  backgroundColor: 'light-grey',\n  borderRadius: '50%',\n  height: 50,\n  width: 50,\n  fontSize: '1.5rem',\n  margin: 5\n})\n\nexport default function ReactionButton ({ client, text, children }) {\n  const [playActive] = useSound('/pop-down.mp3', { volume: 0.25 })\n  const [playOn] = useSound('/pop-up-on.mp3', { volume: 0.25 })\n\n  function sendReaction (text) {\n    client.send({\n      '@type': 'sendMessage',\n      chat_id: -440888561,\n      reply_to_message_id: 0,\n      input_message_content: {\n        '@type': 'inputMessageText',\n        text: {\n          '@type': 'formattedText',\n          text,\n          entities: []\n        }\n      }\n    })\n  }\n\n  function onClick (event) {\n    playOn()\n    sendReaction(text)\n  }\n\n  return (\n    <Button onMouseDown={playActive} onMouseUp={onClick}>\n      {children}\n    </Button>\n  )\n}\n","import React from 'react'\nimport TdClient from 'tdweb'\n\nconst TelegramContext = React.createContext()\n\nfunction TelegramProvider (props) {\n  const [client, setClient] = React.useState()\n  const [chatId, setChatId] = React.useState()\n  // we need to keep a pointer to chatId since is used in the tdlib callback\n  const chatIdRef = React.useRef()\n  const [event, setEvent] = React.useState()\n  const [history, setHistory] = React.useState([])\n\n  const downloadFile = async fileId => {\n    // downloading the file\n    await client.send({\n      '@type': 'downloadFile',\n      file_id: fileId,\n      priority: 1,\n      synchronous: true\n    })\n\n    // Read the data from local tdlib to blob\n    return await client.send({\n      '@type': 'readFile',\n      file_id: fileId\n    })\n  }\n\n  const getChatHistory = React.useCallback(\n    (chatId, from_message_id = 0) => {\n      client\n        .send({\n          '@type': 'getChatHistory',\n          chat_id: chatId,\n          limit: 100,\n          from_message_id\n        })\n        .then(newHistory =>\n          setHistory(history => {\n            const uniqueMessages = new Set([...history, ...newHistory.messages])\n            return Array.from(uniqueMessages).sort((a, b) => a.date - b.date)\n          })\n        )\n    },\n    [client]\n  )\n\n  const handleMessages = update => {\n    // We can have a new message or one could be deleted\n    switch (update['@type']) {\n      case 'updateNewMessage':\n        if (update?.message?.chat_id === chatIdRef.current) {\n          setHistory(history => [...history, update?.message])\n        }\n        break\n      case 'updateDeleteMessages':\n        // delete the image from the cache\n        if (update.chat_id === chatIdRef.current) {\n          update.message_ids.forEach(async messageId => {\n            setHistory(history =>\n              history.filter(message => message.id !== messageId)\n            )\n          })\n        }\n\n        break\n      default:\n        break\n    }\n  }\n\n  const onUpdate = React.useCallback(update => {\n    // console.log('***', JSON.stringify(update))\n    // We care only of the auth states here\n    if (update['@type'] === 'updateAuthorizationState') {\n      setEvent(update)\n    }\n\n    if (\n      update['@type'] === 'updateNewMessage' ||\n      update['@type'] === 'updateDeleteMessages'\n    ) {\n      handleMessages(update)\n    }\n  }, [])\n\n  React.useEffect(() => {\n    console.log('Initializing tdlib')\n    const tdlib = new TdClient({\n      useTestDC: false,\n      readOnly: false,\n      verbosity: 3,\n      jsVerbosity: 3,\n      fastUpdating: true,\n      useDatabase: false,\n      mode: 'wasm'\n    })\n\n    tdlib.onUpdate = onUpdate\n    setClient(tdlib)\n  }, [onUpdate])\n\n  React.useEffect(() => {\n    if (client) {\n      client.send({\n        '@type': 'setTdlibParameters',\n        parameters: {\n          '@type': 'tdParameters',\n          use_test_dc: false,\n          api_id: process.env.REACT_APP_APP_ID,\n          api_hash: process.env.REACT_APP_HASH_ID,\n          system_language_code: navigator.language || 'en',\n          device_model: 'Telegram Frame',\n          application_version: '0.1',\n          use_secret_chats: false,\n          use_message_database: false,\n          use_file_database: false,\n          files_directory: '/'\n        }\n      })\n    }\n  }, [client])\n\n  React.useEffect(() => {\n    async function loadHistory () {\n      await client.send({\n        '@type': 'getChats',\n        chat_list: { '@type': 'chatListMain' },\n        offset_order: '9223372036854775807',\n        offset_chat_id: chatId,\n        limit: 1\n      })\n\n      // on the first call, tdlib could return just 1 message\n      await getChatHistory(chatId)\n    }\n\n    if (client && chatId) {\n      chatIdRef.current = chatId\n      loadHistory()\n    }\n  }, [client, chatId, getChatHistory])\n\n  return (\n    <TelegramContext.Provider\n      value={{\n        client,\n        chatId,\n        setChatId,\n        event,\n        history,\n        getChatHistory,\n        downloadFile\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction useTdlib () {\n  const context = React.useContext(TelegramContext)\n  if (context === undefined) {\n    throw new Error(`useTdlib must be used within a TelegramProvider`)\n  }\n  return context\n}\n\nexport { TelegramProvider, useTdlib }\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport { first, last, isEmpty } from 'lodash'\nimport ReactionButton from './ReactionButton'\nimport { useTdlib } from './Tdlib'\n\nconst Container = styled.div({\n  overflow: 'hidden',\n  height: 600,\n  width: 1024,\n  cursor: 'none'\n})\n\nconst Picture = styled.div(({ blob }) => ({\n  width: '100%',\n  height: 600,\n  backgroundImage: `url(${blob})`,\n  backgroundPosition: 'center',\n  backgroundRepeat: 'no-repeat',\n  backgroundSize: 'cover'\n}))\n\nconst Caption = styled.div({\n  position: 'relative',\n  top: -60,\n  left: '2%',\n  color: 'white',\n  fontSize: '2rem'\n})\n\nconst Reactions = styled.div({\n  position: 'relative',\n  top: -120,\n  left: '85%',\n  display: 'flex',\n  flexDirection: 'row'\n})\n\nexport default function Slideshow () {\n  const { client, chatId, history, getChatHistory, downloadFile } = useTdlib()\n  const [media, setMedia] = React.useState([])\n  const [caption, setCaption] = React.useState('')\n\n  React.useEffect(() => {\n    console.log('Received a new history', history)\n\n    async function getLastMessage () {\n      // Getting last message with a Photo/Video\n      const mediaMessages = history.filter(message =>\n        ['messagePhoto', 'messageVideo'].includes(message?.content?.['@type'])\n      )\n\n      // We don't have any picture, let's try to load new data...\n      if (isEmpty(mediaMessages)) {\n        getChatHistory(chatId, first(history)?.id)\n        return\n      }\n\n      const message = last(mediaMessages)\n      switch (message?.content?.['@type']) {\n        case 'messagePhoto':\n          const photo = message.content.photo\n          const photoSize = last(photo.sizes)\n          const photoFileId = photoSize.photo.id\n          const localPhotoFile = await downloadFile(photoFileId)\n          const photoSrc = URL.createObjectURL(localPhotoFile.data)\n          setMedia(<Picture data-testid={photoFileId} blob={photoSrc} />)\n          setCaption(message.content?.text)\n          break\n        case 'messageVideo':\n          // display a video!\n          const video = message.content.video\n          const videoId = video.video.id\n          const localVideoFile = await downloadFile(videoId)\n          const videoSrc = URL.createObjectURL(localVideoFile.data)\n          setMedia(\n            <video data-testid={videoId} src={videoSrc} controls autoPlay />\n          )\n          setCaption(message.content?.text)\n          break\n        default:\n          break\n      }\n    }\n\n    if (!isEmpty(history)) {\n      getLastMessage()\n    }\n  }, [client, history, chatId, getChatHistory, downloadFile])\n\n  if (isEmpty(history)) {\n    return (\n      <div>\n        <span>There are no pictures in this chat.</span>\n      </div>\n    )\n  }\n\n  return (\n    <Container>\n      {media}\n      <Caption>{caption}</Caption>\n      <Reactions>\n        <ReactionButton client={client} text='♥️'>\n          ♥️\n        </ReactionButton>\n        <ReactionButton client={client} text='🥰'>\n          🥰\n        </ReactionButton>\n      </Reactions>\n    </Container>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport { useTdlib } from './Tdlib'\n\nconst Container = styled.div({\n  display: 'grid',\n  placeItems: 'center',\n  height: '100vh'\n})\n\nconst ChatPicture = styled.div(({ src }) => ({\n  height: 400,\n  width: 400,\n  borderRadius: '50%',\n  backgroundImage: `url(${src})`,\n  backgroundPosition: 'center',\n  backgroundRepeat: 'no-repeat',\n  backgroundSize: 'cover'\n}))\n\nconst Message = styled.div({\n  fontSize: '2rem'\n})\n\nexport default function EmptyChat ({ chatId }) {\n  const { client } = useTdlib()\n  const [title, setTitle] = React.useState(null)\n  const [chatPhoto, setChatPhoto] = React.useState(null)\n\n  React.useEffect(() => {\n    let isSubscribed = true\n\n    async function getChat () {\n      await client.send({\n        '@type': 'getChats',\n        chat_list: { '@type': 'chatListMain' },\n        offset_order: '9223372036854775807',\n        offset_chat_id: chatId,\n        limit: 1\n      })\n\n      const chat = await client.send({\n        '@type': 'getChat',\n        chat_id: chatId\n      })\n\n      const fileId = chat?.photo?.big?.id\n\n      if (fileId) {\n        // downloading the file\n        await client.send({\n          '@type': 'downloadFile',\n          file_id: fileId,\n          priority: 16,\n          synchronous: true\n        })\n\n        // Read the data from local tdlib to blob\n        const localFile = await client.send({\n          '@type': 'readFile',\n          file_id: fileId\n        })\n\n        const src = URL.createObjectURL(localFile.data)\n\n        if (isSubscribed) {\n          setTitle(chat.title)\n          setChatPhoto(src)\n        }\n      }\n    }\n\n    getChat()\n\n    return () => (isSubscribed = false)\n  }, [client, chatId])\n\n  return (\n    <Container>\n      <ChatPicture src={chatPhoto} />\n      <Message>Send a picture to '{title}' to view it here</Message>\n    </Container>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport { useTdlib } from './Tdlib'\n\nconst ListContainer = styled.div({\n  scrollDirection: 'horizontal'\n})\n\nconst List = styled.ul({\n  listStyle: 'none',\n  margin: 0,\n  padding: 0\n})\n\nconst Chat = styled.li({\n  padding: 10,\n  fontSize: '2rem',\n  '&:nth-child(odd)': {\n    background: '#ccc'\n  }\n})\n\nexport default function ChatSelection () {\n  const { client, setChatId } = useTdlib()\n  const [chats, setChats] = React.useState([])\n\n  React.useEffect(() => {\n    async function getChats () {\n      const response = await client.send({\n        '@type': 'getChats',\n        chat_list: { '@type': 'chatListMain' },\n        offset_order: '9223372036854775807',\n        offset_chat_id: 0,\n        limit: 10\n      })\n\n      response.chat_ids.map(async chatId => {\n        const chatInfo = await client.send({\n          '@type': 'getChat',\n          chat_id: chatId\n        })\n        setChats(chats => [...chats, { id: chatId, title: chatInfo.title }])\n      })\n    }\n\n    getChats()\n  }, [client])\n\n  return (\n    <ListContainer>\n      <h1>Select a chat to use as Frame:</h1>\n      <List>\n        {chats.map(chat => (\n          <Chat key={chat.id} onClick={event => setChatId(chat.id)}>\n            {chat.title}\n          </Chat>\n        ))}\n      </List>\n    </ListContainer>\n  )\n}\n","import React from 'react'\nimport Slideshow from './Slideshow'\nimport { isEmpty } from 'lodash'\nimport { useTdlib } from './Tdlib'\nimport EmptyChat from './EmptyChat'\nimport ChatSelection from './ChatSelection'\n\nexport default function MainApp () {\n  const { chatId, history } = useTdlib()\n\n  if (!chatId) {\n    return <ChatSelection />\n  }\n\n  if (isEmpty(history)) {\n    return <EmptyChat chatId={chatId} />\n  }\n\n  return <Slideshow />\n}\n","import React from 'react'\nimport Authentication from './Authentication'\nimport MainApp from './MainApp'\n\nimport '@fontsource/roboto'\nimport './App.css'\nimport { useTdlib } from './Tdlib'\n\nfunction App () {\n  const { client, event, updates } = useTdlib()\n\n  if (event && event['authorization_state']) {\n    const type = event['authorization_state']['@type']\n    switch (type) {\n      case 'authorizationStateWaitEncryptionKey':\n      case 'authorizationStateWaitOtherDeviceConfirmation':\n      case 'authorizationStateWaitPhoneNumber':\n      case 'updateAuthorizationState':\n      case 'authorizationStateClosed':\n        return <Authentication event={event} client={client} />\n      case 'authorizationStateReady':\n        return <MainApp updates={updates} client={client} />\n      default:\n        return null\n    }\n  } else {\n    return <div>Loading...</div>\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { TelegramProvider } from './Tdlib'\n\nReactDOM.render(\n  <React.StrictMode>\n    <TelegramProvider>\n      <App />\n    </TelegramProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}