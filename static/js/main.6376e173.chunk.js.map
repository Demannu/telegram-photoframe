{"version":3,"sources":["logo.png","Authentication.js","ReactionButton.js","Slideshow.js","useLocalStorage.js","ChatSelection.js","EmptyChat.js","MainApp.js","App.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","display","placeItems","Authentication","event","client","qr","React","useRef","useEffect","a","type","current","send","other_user_ids","qrCode","QRCodeStyling","width","height","data","authorization_state","link","image","logo","dotsOptions","color","backgroundOptions","imageOptions","crossOrigin","margin","innerHTML","append","handleAuhentication","ref","Button","button","padding","border","font","backgroundColor","borderRadius","fontSize","ReactionButton","text","children","useSound","volume","playActive","playOn","onMouseDown","onMouseUp","chat_id","reply_to_message_id","input_message_content","entities","sendReaction","overflow","Picture","blob","backgroundImage","backgroundPosition","backgroundRepeat","backgroundSize","Caption","position","top","left","Reactions","flexDirection","Slideshow","history","useState","id","setId","photo","setPhoto","caption","setCaption","message","last","content","photoSize","sizes","fileId","file_id","priority","synchronous","localFile","src","URL","createObjectURL","getLastMessage","data-testis","useLocalStorage","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","ChatSelection","callback","chats","setChats","chat_list","offset_order","offset_chat_id","limit","chat_ids","map","chatId","chatInfo","title","getChats","chat","onClick","ChatPicture","Message","EmptyChat","setTitle","chatPhoto","setChatPhoto","big","getChat","MainApp","updates","setChatId","setHistory","message_ids","forEach","messageId","filter","handleUpdate","messages","fetchHistory","isEmpty","App","setEvent","setUpdates","TdClient","useTestDC","readOnly","verbosity","jsVerbosity","fastUpdating","useDatabase","mode","onUpdate","update","parameters","use_test_dc","api_id","process","api_hash","system_language_code","navigator","language","device_model","application_version","use_secret_chats","use_message_database","use_file_database","files_directory","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAAe,MAA0B,iCCKnCA,EAAYC,IAAOC,IAAI,CAC3BC,QAAS,OACTC,WAAY,WAGC,SAASC,EAAT,GAA6C,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OACzCC,EAAKC,IAAMC,SAmDjB,OAjDAD,IAAME,WAAU,WAAM,4CACpB,8BAAAC,EAAA,sDACQC,EAAOP,EAAK,oBAAwB,SAD5C,KAEUO,EAFV,OAGS,wCAHT,OAQS,6BART,MASS,sCATT,OAeS,kDAfT,wCAIYN,EAAOO,QAAQC,KAAK,CACxB,QAAS,+BALjB,0DAUYR,EAAOO,QAAQC,KAAK,CACxB,QAAS,8BACTC,eAAgB,KAZxB,kDAgBYC,EAAS,IAAIC,IAAc,CAC/BC,MAAO,IACPC,OAAQ,IACRC,KAAMf,EAAMgB,oBAAoBC,KAChCC,MAAOC,EACPC,YAAa,CACXC,MAAO,UACPd,KAAM,UAERe,kBAAmB,CACjBD,MAAO,eAETE,aAAc,CACZC,YAAa,YACbC,OAAQ,MAIZvB,EAAGM,QAAQkB,UAAY,GACvBf,EAAOgB,OAAOzB,EAAGM,SAnCvB,sGADoB,sBA4ChBP,EAAOO,UAAP,OAAkBR,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAOgB,sBA5CR,WAAD,wBA6ClBY,KAED,CAAC3B,EAAQD,IAGV,eAACN,EAAD,WACE,wDACA,qBAAKmC,IAAK3B,O,2BC7DV4B,EAASnC,IAAOoC,OAAO,CAC3BC,QAAS,GACTC,OAAQ,OACRC,KAAM,UACNb,MAAO,UACPc,gBAAiB,aACjBC,aAAc,MACdtB,OAAQ,GACRD,MAAO,GACPwB,SAAU,SACVZ,OAAQ,IAGK,SAASa,EAAT,GAAsD,IAA3BrC,EAA0B,EAA1BA,OAAQsC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SAAY,EAC7CC,YAAS,gBAAiB,CAAEC,OAAQ,MAAlDC,EAD2D,sBAEjDF,YAAS,iBAAkB,CAAEC,OAAQ,MAA/CE,EAF2D,oBAyBlE,OACE,cAACd,EAAD,CAAQe,YAAaF,EAAYG,UANnC,SAAkB9C,GAChB4C,IAjBF,SAAuBL,GACrBtC,EAAOO,QAAQC,KAAK,CAClB,QAAS,cACTsC,SAAU,UACVC,oBAAqB,EACrBC,sBAAuB,CACrB,QAAS,mBACTV,KAAM,CACJ,QAAS,gBACTA,OACAW,SAAU,OAQhBC,CAAaZ,IAIb,SACGC,ICvCP,IAAM9C,EAAYC,IAAOC,IAAV,uEAAGD,CAAW,CAC3ByD,SAAU,SACVtC,OAAQ,IACRD,MAAO,OAGHwC,EAAU1D,IAAOC,IAAV,qEAAGD,EAAW,gBAAG2D,EAAH,EAAGA,KAAH,MAAe,CACxCzC,MAAO,OACPC,OAAQ,IACRyC,gBAAgB,OAAD,OAASD,EAAT,KACfE,mBAAoB,SACpBC,iBAAkB,YAClBC,eAAgB,YAGZC,EAAUhE,IAAOC,IAAV,qEAAGD,CAAW,CACzBiE,SAAU,WACVC,KAAM,GACNC,KAAM,KACNzC,MAAO,QACPgB,SAAU,SAGN0B,EAAYpE,IAAOC,IAAV,uEAAGD,CAAW,CAC3BiE,SAAU,WACVC,KAAM,IACNC,KAAM,MACNjE,QAAS,OACTmE,cAAe,QAGF,SAASC,EAAT,GAA0C,IAApBhE,EAAmB,EAAnBA,OAAQiE,EAAW,EAAXA,QAAW,EAClC/D,IAAMgE,WAD4B,mBAC/CC,EAD+C,KAC3CC,EAD2C,OAE5BlE,IAAMgE,SAAS,IAFa,mBAE/CG,EAF+C,KAExCC,EAFwC,OAGxBpE,IAAMgE,SAAS,IAHS,mBAG/CK,EAH+C,KAGtCC,EAHsC,KA0CtD,OArCAtE,IAAME,WAAU,WAAM,4CACpB,4CAAAC,EAAA,yDAIsC,kBAAzB,QAFLoE,EAAUC,eAAKT,UAEV,IAAPQ,GAAA,UAAAA,EAASE,eAAT,eAAmB,UAJzB,0BAK+BF,EAAQE,QAA3BJ,EALZ,EAKYA,QAASF,EALrB,EAKqBA,MACXO,EAAYF,eAAKL,EAAMQ,OACvBC,EAASF,EAAUP,MAAMF,GAPnC,SAUUnE,EAAOO,QAAQC,KAAK,CACxB,QAAS,eACTuE,QAASD,EACTE,SAAU,EACVC,aAAa,IAdnB,uBAkB4BjF,EAAOO,QAAQC,KAAK,CAC1C,QAAS,WACTuE,QAASD,IApBf,OAkBUI,EAlBV,OAuBUC,EAAMC,IAAIC,gBAAgBH,EAAUpE,MAE1CsD,EAAMU,GACNR,EAASa,GACTX,EAAU,OAACD,QAAD,IAACA,OAAD,EAACA,EAASjC,MA3BxB,6CADoB,sBAgChB2B,GAhCiB,WAAD,wBAiClBqB,KAED,CAACrB,IAGF,eAAC,EAAD,WACE,cAACb,EAAD,CAASmC,cAAapB,EAAId,KAAMgB,IAChC,cAACX,EAAD,UAAUa,IACV,eAACT,EAAD,WACE,cAACzB,EAAD,CAAgBrC,OAAQA,EAAQsC,KAAK,eAArC,0BAGA,cAACD,EAAD,CAAgBrC,OAAQA,EAAQsC,KAAK,eAArC,gCChDOkD,MApCf,SAA0BC,EAAKC,GAAc,MAGLxB,oBAAS,WAC7C,IAEE,IAAMyB,EAAOC,OAAOC,aAAaC,QAAQL,GAEzC,OAAOE,EAAOI,KAAKC,MAAML,GAAQD,EACjC,MAAOO,GAGP,OADAC,QAAQC,IAAIF,GACLP,MAZgC,mBAGpCU,EAHoC,KAGvBC,EAHuB,KAiC3C,MAAO,CAACD,EAfS,SAAAE,GACf,IAEE,IAAMC,EACJD,aAAiBE,SAAWF,EAAMF,GAAeE,EAEnDD,EAAeE,GAEfX,OAAOC,aAAaY,QAAQhB,EAAKM,KAAKW,UAAUH,IAChD,MAAON,GAEPC,QAAQC,IAAIF,OC7BH,SAASU,EAAT,GAA+C,IAArB3G,EAAoB,EAApBA,OAAQ4G,EAAY,EAAZA,SAAY,EACjC1G,IAAMgE,SAAS,IADkB,mBACpD2C,EADoD,KAC7CC,EAD6C,KAyB3D,OAtBA5G,IAAME,WAAU,WAAM,4CACpB,sBAAAC,EAAA,sEACyBL,EAAOO,QAAQC,KAAK,CACzC,QAAS,WACTuG,UAAW,CAAE,QAAS,gBACtBC,aAAc,sBACdC,eAAgB,EAChBC,MAAO,KANX,cASWC,SAASC,IAAlB,uCAAsB,WAAMC,GAAN,eAAAhH,EAAA,sEACGL,EAAOO,QAAQC,KAAK,CACzC,QAAS,UACTsC,QAASuE,IAHS,OACdC,EADc,OAKpBR,GAAS,SAAAD,GAAK,4BAAQA,GAAR,CAAe,CAAE1C,GAAIkD,EAAQE,MAAOD,EAASC,YALvC,2CAAtB,uDATF,4CADoB,uBAAC,WAAD,wBAmBpBC,KACC,CAACxH,IAGF,gCACE,2DACA,6BACG6G,EAAMO,KAAI,SAAAK,GAAI,OACb,oBAAkBC,QAAS,SAAA3H,GAAK,OAAI6G,EAASa,EAAKtD,KAAlD,SACGsD,EAAKF,OADCE,EAAKtD,YC7BxB,IAAM1E,EAAYC,IAAOC,IAAV,uEAAGD,CAAW,CAC3BE,QAAS,OACTC,WAAY,SACZgB,OAAQ,UAGJ8G,EAAcjI,IAAOC,IAAV,yEAAGD,EAAW,gBAAGyF,EAAH,EAAGA,IAAH,MAAc,CAC3CtE,OAAQ,IACRD,MAAO,IACPuB,aAAc,MACdmB,gBAAgB,OAAD,OAAS6B,EAAT,KACf5B,mBAAoB,SACpBC,iBAAkB,YAClBC,eAAgB,YAGZmE,EAAUlI,IAAOC,IAAV,qEAAGD,CAAW,CACzB0C,SAAU,SAGG,SAASyF,EAAT,GAAyC,IAAnB7H,EAAkB,EAAlBA,OAAQqH,EAAU,EAAVA,OAAU,EAC3BnH,IAAMgE,SAAS,MADY,mBAC9CqD,EAD8C,KACvCO,EADuC,OAEnB5H,IAAMgE,SAAS,MAFI,mBAE9C6D,EAF8C,KAEnCC,EAFmC,KA4CrD,OAxCA9H,IAAME,WAAU,WAAM,4CACpB,kCAAAC,EAAA,sEACQL,EAAOO,QAAQC,KAAK,CACxB,QAAS,WACTuG,UAAW,CAAE,QAAS,gBACtBC,aAAc,sBACdC,eAAgBI,EAChBH,MAAO,IANX,uBASqBlH,EAAOO,QAAQC,KAAK,CACrC,QAAS,UACTsC,QAASuE,IAXb,cASQI,EATR,OAcQ3C,EAAS2C,EAAKpD,MAAM4D,IAAI9D,GAdhC,SAiBQnE,EAAOO,QAAQC,KAAK,CACxB,QAAS,eACTuE,QAASD,EACTE,SAAU,EACVC,aAAa,IArBjB,wBAyB0BjF,EAAOO,QAAQC,KAAK,CAC1C,QAAS,WACTuE,QAASD,IA3Bb,QAyBQI,EAzBR,OA8BQC,EAAMC,IAAIC,gBAAgBH,EAAUpE,MAE1CkH,EAAa7C,GACb2C,EAASL,EAAKF,OAjChB,6CADoB,uBAAC,WAAD,wBAqCpBW,KACC,CAAClI,EAAQqH,IAGV,eAAC,EAAD,WACE,cAACM,EAAD,CAAaxC,IAAK4C,IAClB,eAACH,EAAD,iCAA6BL,EAA7B,0BC/DS,SAASY,EAAT,GAAwC,IAApBC,EAAmB,EAAnBA,QAASpI,EAAU,EAAVA,OAAU,EACxBwF,EAAgB,UADQ,mBAC7C6B,EAD6C,KACrCgB,EADqC,OAEtBnI,IAAMgE,SAAS,IAFO,mBAE7CD,EAF6C,KAEpCqE,EAFoC,KA2DpD,OAvDApI,IAAME,WAAU,WAAM,4CACpB,4BAAAC,EAAA,2DAEU+H,EAAQ,SAFlB,OAGS,qBAHT,OASS,yBATT,6BAIiB,OAAPA,QAAO,IAAPA,GAAA,UAAAA,EAAS3D,eAAT,eAAkB3B,WAAYuE,GAChCiB,GAAW,SAAArE,GAAO,4BAAQA,GAAR,QAAiBmE,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAS3D,aALpD,kCAWU2D,EAAQtF,UAAYuE,GACtBe,EAAQG,YAAYC,QAApB,uCAA4B,WAAMC,GAAN,SAAApI,EAAA,sDAC1BiI,GAAW,SAAArE,GAAO,OAChBA,EAAQyE,QAAO,SAAAjE,GAAO,OAAIA,EAAQN,KAAOsE,QAFjB,2CAA5B,uDAZR,kGADoB,sBA0BhBL,GA1BiB,WAAD,wBA2BlBO,KAED,CAACP,IAEJlI,IAAME,WAAU,WAAM,4CACpB,4BAAAC,EAAA,6DACE6F,QAAQC,IAAI,kBADd,SAEQnG,EAAOO,QAAQC,KAAK,CACxB,QAAS,WACTuG,UAAW,CAAE,QAAS,gBACtBC,aAAc,sBACdC,eAAgBI,EAChBH,MAAO,IAPX,cAUEhB,QAAQC,IAAI,wBAAyBkB,GAVvC,SAWwBrH,EAAOO,QAAQC,KAAK,CACxC,QAAS,iBACTsC,QAASuE,EACTH,MAAO,MAdX,OAWQjD,EAXR,OAiBEqE,EAAWrE,EAAQ2E,UAjBrB,4CADoB,uBAAC,WAAD,wBAqBpBC,KACC,IAEExB,EAIDyB,kBAAQ7E,GACH,cAAC4D,EAAD,CAAW7H,OAAQA,EAAQqH,OAAQA,IAGrC,cAACrD,EAAD,CAAWhE,OAAQA,EAAQiE,QAASA,IAPlC,cAAC0C,EAAD,CAAe3G,OAAQA,EAAQ4G,SAAUyB,I,YCarCU,MAxEf,WAAiB,IAAD,EACY7I,IAAMgE,WADlB,mBACPnE,EADO,KACAiJ,EADA,OAEgB9I,IAAMgE,WAFtB,mBAEPkE,EAFO,KAEEa,EAFF,KAGRjJ,EAASE,IAAMC,SAkDrB,GAhDAD,IAAME,WAAU,WACd8F,QAAQC,IAAI,sBACZnG,EAAOO,QAAU,IAAI2I,IAAS,CAC5BC,WAAW,EACXC,UAAU,EACVC,UAAW,EACXC,YAAa,EACbC,cAAc,EACdC,aAAa,EACbC,KAAM,WAEP,IAEHvJ,IAAME,WAAU,WACdJ,EAAOO,QAAQmJ,SAAW,SAAAC,GAGpBA,GAA8B,6BAApBA,EAAO,UACnBX,EAASW,IAITA,GACqB,qBAApBA,EAAO,UACc,yBAApBA,EAAO,UAETV,EAAWU,IAIf3J,EAAOO,QAAQC,KAAK,CAClB,QAAS,qBACToJ,WAAY,CACV,QAAS,eACTC,aAAa,EACbC,OAAQC,QACRC,SAAUD,mCACVE,qBAAsBC,UAAUC,UAAY,KAC5CC,aAAc,iBACdC,oBAAqB,MACrBC,kBAAkB,EAClBC,sBAAsB,EACtBC,mBAAmB,EACnBC,gBAAiB,SAGpB,CAACzK,KAEAD,IAASA,EAAK,oBAehB,OAAO,6CAbP,OADaA,EAAK,oBAAwB,UAExC,IAAK,sCACL,IAAK,gDACL,IAAK,oCACL,IAAK,2BACL,IAAK,2BACH,OAAO,cAACD,EAAD,CAAgBC,MAAOA,EAAOC,OAAQA,IAC/C,IAAK,0BACH,OAAO,cAACmI,EAAD,CAASC,QAASA,EAASpI,OAAQA,IAC5C,QACE,OAAO,OC7DA0K,EAZS,SAAAC,GAClBA,GAAeA,aAAuBnE,UACxC,6BAAqBoE,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6376e173.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.eea735da.png\";","import React from 'react'\nimport styled from 'styled-components'\nimport QRCodeStyling from 'qr-code-styling'\nimport logo from './logo.png'\n\nconst Container = styled.div({\n  display: 'grid',\n  placeItems: 'center'\n})\n\nexport default function Authentication ({ event, client }) {\n  const qr = React.useRef()\n\n  React.useEffect(() => {\n    async function handleAuhentication () {\n      const type = event['authorization_state']['@type']\n      switch (type) {\n        case 'authorizationStateWaitEncryptionKey':\n          await client.current.send({\n            '@type': 'checkDatabaseEncryptionKey'\n          })\n          break\n        case 'authorizationStateClosed':\n        case 'authorizationStateWaitPhoneNumber':\n          await client.current.send({\n            '@type': 'requestQrCodeAuthentication',\n            other_user_ids: []\n          })\n          break\n        case 'authorizationStateWaitOtherDeviceConfirmation':\n          const qrCode = new QRCodeStyling({\n            width: 400,\n            height: 400,\n            data: event.authorization_state.link,\n            image: logo,\n            dotsOptions: {\n              color: '#25abec',\n              type: 'square'\n            },\n            backgroundOptions: {\n              color: 'transparent'\n            },\n            imageOptions: {\n              crossOrigin: 'anonymous',\n              margin: 20\n            }\n          })\n\n          qr.current.innerHTML = ''\n          qrCode.append(qr.current)\n\n          break\n        default:\n          break\n      }\n    }\n\n    if (client.current && event?.authorization_state) {\n      handleAuhentication()\n    }\n  }, [client, event])\n\n  return (\n    <Container>\n      <h1>Login with your device</h1>\n      <div ref={qr}></div>\n    </Container>\n  )\n}\n\n// function areEqual (prevProps, nextProps) {\n//   return prevProps['type'] === nextProps['type']\n// }\n\n// export default React.memo(Authentication, areEqual)\n","import React from 'react'\nimport styled from 'styled-components'\nimport useSound from 'use-sound'\n\nconst Button = styled.button({\n  padding: 10,\n  border: 'none',\n  font: 'inherit',\n  color: 'inherit',\n  backgroundColor: 'light-grey',\n  borderRadius: '50%',\n  height: 50,\n  width: 50,\n  fontSize: '1.5rem',\n  margin: 5\n})\n\nexport default function ReactionButton ({ client, text, children }) {\n  const [playActive] = useSound('/pop-down.mp3', { volume: 0.25 })\n  const [playOn] = useSound('/pop-up-on.mp3', { volume: 0.25 })\n\n  function sendReaction (text) {\n    client.current.send({\n      '@type': 'sendMessage',\n      chat_id: -440888561,\n      reply_to_message_id: 0,\n      input_message_content: {\n        '@type': 'inputMessageText',\n        text: {\n          '@type': 'formattedText',\n          text,\n          entities: []\n        }\n      }\n    })\n  }\n\n  function onClick (event) {\n    playOn()\n    sendReaction(text)\n  }\n\n  return (\n    <Button onMouseDown={playActive} onMouseUp={onClick}>\n      {children}\n    </Button>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components/macro'\nimport { last } from 'lodash'\nimport ReactionButton from './ReactionButton'\n\nconst Container = styled.div({\n  overflow: 'hidden',\n  height: 600,\n  width: 1024\n})\n\nconst Picture = styled.div(({ blob }) => ({\n  width: '100%',\n  height: 600,\n  backgroundImage: `url(${blob})`,\n  backgroundPosition: 'center',\n  backgroundRepeat: 'no-repeat',\n  backgroundSize: 'cover'\n}))\n\nconst Caption = styled.div({\n  position: 'relative',\n  top: -60,\n  left: '2%',\n  color: 'white',\n  fontSize: '2rem'\n})\n\nconst Reactions = styled.div({\n  position: 'relative',\n  top: -120,\n  left: '85%',\n  display: 'flex',\n  flexDirection: 'row'\n})\n\nexport default function Slideshow ({ client, history }) {\n  const [id, setId] = React.useState()\n  const [photo, setPhoto] = React.useState([])\n  const [caption, setCaption] = React.useState('')\n\n  React.useEffect(() => {\n    async function getLastMessage () {\n      // Getting last message\n      const message = last(history)\n\n      if (message?.content?.['@type'] === 'messagePhoto') {\n        const { caption, photo } = message.content\n        const photoSize = last(photo.sizes)\n        const fileId = photoSize.photo.id\n\n        // downloading the file\n        await client.current.send({\n          '@type': 'downloadFile',\n          file_id: fileId,\n          priority: 1,\n          synchronous: true\n        })\n\n        // Read the data from local tdlib to blob\n        const localFile = await client.current.send({\n          '@type': 'readFile',\n          file_id: fileId\n        })\n\n        const src = URL.createObjectURL(localFile.data)\n\n        setId(fileId)\n        setPhoto(src) // photo blob\n        setCaption(caption?.text)\n      }\n    }\n\n    if (history) {\n      getLastMessage()\n    }\n  }, [history])\n\n  return (\n    <Container>\n      <Picture data-testis={id} blob={photo} />\n      <Caption>{caption}</Caption>\n      <Reactions>\n        <ReactionButton client={client} text='♥️'>\n          ♥️\n        </ReactionButton>\n        <ReactionButton client={client} text='🥰'>\n          🥰\n        </ReactionButton>\n      </Reactions>\n    </Container>\n  )\n}\n","import { useState } from 'react'\n\nfunction useLocalStorage (key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key)\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error)\n      return initialValue\n    }\n  })\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value\n      // Save state\n      setStoredValue(valueToStore)\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore))\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error)\n    }\n  }\n\n  return [storedValue, setValue]\n}\n\nexport default useLocalStorage\n","import React from 'react'\n\nexport default function ChatSelection ({ client, callback }) {\n  const [chats, setChats] = React.useState([])\n\n  React.useEffect(() => {\n    async function getChats () {\n      const response = await client.current.send({\n        '@type': 'getChats',\n        chat_list: { '@type': 'chatListMain' },\n        offset_order: '9223372036854775807',\n        offset_chat_id: 0,\n        limit: 10\n      })\n\n      response.chat_ids.map(async chatId => {\n        const chatInfo = await client.current.send({\n          '@type': 'getChat',\n          chat_id: chatId\n        })\n        setChats(chats => [...chats, { id: chatId, title: chatInfo.title }])\n      })\n    }\n\n    getChats()\n  }, [client])\n\n  return (\n    <div>\n      <div>Select a chat to display</div>\n      <ul>\n        {chats.map(chat => (\n          <li key={chat.id} onClick={event => callback(chat.id)}>\n            {chat.title}\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\nconst Container = styled.div({\n  display: 'grid',\n  placeItems: 'center',\n  height: '100vh'\n})\n\nconst ChatPicture = styled.div(({ src }) => ({\n  height: 400,\n  width: 400,\n  borderRadius: '50%',\n  backgroundImage: `url(${src})`,\n  backgroundPosition: 'center',\n  backgroundRepeat: 'no-repeat',\n  backgroundSize: 'cover'\n}))\n\nconst Message = styled.div({\n  fontSize: '2rem'\n})\n\nexport default function EmptyChat ({ client, chatId }) {\n  const [title, setTitle] = React.useState(null)\n  const [chatPhoto, setChatPhoto] = React.useState(null)\n\n  React.useEffect(() => {\n    async function getChat () {\n      await client.current.send({\n        '@type': 'getChats',\n        chat_list: { '@type': 'chatListMain' },\n        offset_order: '9223372036854775807',\n        offset_chat_id: chatId,\n        limit: 1\n      })\n\n      const chat = await client.current.send({\n        '@type': 'getChat',\n        chat_id: chatId\n      })\n\n      const fileId = chat.photo.big.id\n\n      // downloading the file\n      await client.current.send({\n        '@type': 'downloadFile',\n        file_id: fileId,\n        priority: 1,\n        synchronous: true\n      })\n\n      // Read the data from local tdlib to blob\n      const localFile = await client.current.send({\n        '@type': 'readFile',\n        file_id: fileId\n      })\n\n      const src = URL.createObjectURL(localFile.data)\n\n      setChatPhoto(src)\n      setTitle(chat.title)\n    }\n\n    getChat()\n  }, [client, chatId])\n\n  return (\n    <Container>\n      <ChatPicture src={chatPhoto} />\n      <Message>Send a picture to '{title}' to view it here</Message>\n    </Container>\n  )\n}\n","import React from 'react'\nimport Slideshow from './Slideshow'\nimport { isEmpty } from 'lodash'\nimport useLocalStorage from './useLocalStorage'\nimport ChatSelection from './ChatSelection'\nimport EmptyChat from './EmptyChat'\n\nexport default function MainApp ({ updates, client }) {\n  const [chatId, setChatId] = useLocalStorage('chatId')\n  const [history, setHistory] = React.useState([])\n\n  React.useEffect(() => {\n    async function handleUpdate () {\n      // We can have a new message or one could be deleted\n      switch (updates['@type']) {\n        case 'updateNewMessage':\n          if (updates?.message?.chat_id === chatId) {\n            setHistory(history => [...history, updates?.message])\n          }\n\n          break\n        case 'updateDeleteMessages':\n          // delete the image from the cache\n          if (updates.chat_id === chatId) {\n            updates.message_ids.forEach(async messageId => {\n              setHistory(history =>\n                history.filter(message => message.id !== messageId)\n              )\n            })\n          }\n\n          break\n        default:\n          break\n      }\n    }\n\n    if (updates) {\n      handleUpdate()\n    }\n  }, [updates])\n\n  React.useEffect(() => {\n    async function fetchHistory () {\n      console.log('Fetching chats')\n      await client.current.send({\n        '@type': 'getChats',\n        chat_list: { '@type': 'chatListMain' },\n        offset_order: '9223372036854775807',\n        offset_chat_id: chatId,\n        limit: 1\n      })\n\n      console.log('Fetching history for:', chatId)\n      const history = await client.current.send({\n        '@type': 'getChatHistory',\n        chat_id: chatId,\n        limit: 1000\n      })\n\n      setHistory(history.messages)\n    }\n\n    fetchHistory()\n  }, [])\n\n  if (!chatId) {\n    return <ChatSelection client={client} callback={setChatId} />\n  }\n\n  if (isEmpty(history)) {\n    return <EmptyChat client={client} chatId={chatId} />\n  }\n\n  return <Slideshow client={client} history={history} />\n}\n","import React from 'react'\nimport TdClient from 'tdweb'\nimport Authentication from './Authentication'\nimport MainApp from './MainApp'\n\nimport '@fontsource/roboto'\nimport './App.css'\n\nfunction App () {\n  const [event, setEvent] = React.useState()\n  const [updates, setUpdates] = React.useState()\n  const client = React.useRef()\n\n  React.useEffect(() => {\n    console.log('Initializing tdlib')\n    client.current = new TdClient({\n      useTestDC: false,\n      readOnly: false,\n      verbosity: 3,\n      jsVerbosity: 3,\n      fastUpdating: true,\n      useDatabase: false,\n      mode: 'wasm'\n    })\n  }, [])\n\n  React.useEffect(() => {\n    client.current.onUpdate = update => {\n      // console.log('***', JSON.stringify(update))\n      // We care only of the auth states here\n      if (update && update['@type'] === 'updateAuthorizationState') {\n        setEvent(update)\n      }\n\n      if (\n        update &&\n        (update['@type'] === 'updateNewMessage' ||\n          update['@type'] === 'updateDeleteMessages')\n      ) {\n        setUpdates(update)\n      }\n    }\n\n    client.current.send({\n      '@type': 'setTdlibParameters',\n      parameters: {\n        '@type': 'tdParameters',\n        use_test_dc: false,\n        api_id: process.env.REACT_APP_APP_ID,\n        api_hash: process.env.REACT_APP_HASH_ID,\n        system_language_code: navigator.language || 'en',\n        device_model: 'Telegram Frame',\n        application_version: '0.1',\n        use_secret_chats: false,\n        use_message_database: false,\n        use_file_database: false,\n        files_directory: '/'\n      }\n    })\n  }, [client])\n\n  if (event && event['authorization_state']) {\n    const type = event['authorization_state']['@type']\n    switch (type) {\n      case 'authorizationStateWaitEncryptionKey':\n      case 'authorizationStateWaitOtherDeviceConfirmation':\n      case 'authorizationStateWaitPhoneNumber':\n      case 'updateAuthorizationState':\n      case 'authorizationStateClosed':\n        return <Authentication event={event} client={client} />\n      case 'authorizationStateReady':\n        return <MainApp updates={updates} client={client} />\n      default:\n        return null\n    }\n  } else {\n    return <div>Loading...</div>\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}